{"version":3,"sources":["features/error/ErrorPage.module.scss","features/error/ErrorPage.tsx","features/userEvents/EventListItem.module.scss","features/userRepos/RepoList.module.scss","features/user/UserPage.module.scss","features/userEvents/EventListItem.tsx","features/userEvents/EventList.tsx","features/userRepos/RepoList.tsx","features/user/UserPage.tsx"],"names":["module","exports","ErrorPage","className","styles","boxContainer","message","footer","to","EventListItem","event","user","repo","action","date","urlPR","item","moment","Date","format","body","AvatarImage","src","avatarUrl","alt","login","type","SelectableTypes","Timeline","href","name","EventList","dispatch","useDispatch","useSelector","state","userEvents","loading","eventsError","error","events","eventsByUser","toLowerCase","useEffect","getEventsStart","data-testid","length","map","key","id","RepoList","reposCount","publicRepos","userRepos","reposError","repos","reposByUser","getReposStart","page","content","onClick","currentPage","Math","floor","REPOS_PER_PAGE","UserPage","useParams","userDetails","detailsByUser","userError","useDocumentTitle","getUserDetailsStart","window","scrollTo","top","container","section","lg","mtop"],"mappings":"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","file":"static/js/3.a3edb7b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxContainer\":\"ErrorPage_boxContainer__2kxSl\",\"message\":\"ErrorPage_message__1TGK2\",\"footer\":\"ErrorPage_footer__ZxKal\"};","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport styles from './ErrorPage.module.scss'\n\nconst ErrorPage = () => {\n    return (\n        <div className={styles.boxContainer}>\n            <div className={styles.message}> Page is not found </div>\n            <div className={styles.footer}>\n                <Link to=\"/\">Back to Home</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default ErrorPage\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"EventListItem_item__15DC_\",\"date\":\"EventListItem_date__1xmGw\",\"body\":\"EventListItem_body__37faP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"repos\":\"RepoList_repos__lEmSd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserPage_container__2UYZp\",\"section\":\"UserPage_section__2cqvk\",\"mtop\":\"UserPage_mtop__3b_3V\"};","import moment from 'moment'\nimport React from 'react'\nimport { Event, User } from 'app/types'\nimport AvatarImage, { SelectableTypes } from 'common/components/AvatarImage'\n\nimport styles from './EventListItem.module.scss'\n\ninterface ELIProps {\n    event: Event\n    user: User\n}\n\nexport const EventListItem = ({ event, user }: ELIProps) => {\n    const { repo, action, date, urlPR } = event\n\n    return (\n        <div className={styles.item}>\n            <p className={styles.date}>{moment(new Date(date)).format('MMM DD, YYYY')}</p>\n\n            <div className={styles.body}>\n                <AvatarImage src={user.avatarUrl} alt={user.login} type={SelectableTypes.Timeline} />\n                <div>\n                    <p>\n                        @{user.login} {action} <a href={urlPR}>PR</a>\n                    </p>\n                    <p>{repo.name}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from 'app/rootReducer'\nimport { User } from 'app/types'\nimport { ErrorBox, Spinner } from 'common/components'\n\nimport { EventListItem } from './EventListItem'\nimport { getEventsStart } from './userEventsSlice'\n\ninterface ELProps {\n    user: User\n}\n\nexport const EventList = ({ user }: ELProps) => {\n    const { login } = user\n\n    const dispatch = useDispatch()\n\n    const { loading, error: eventsError, eventsByUser } = useSelector((state: RootState) => state.userEvents)\n\n    const events = eventsByUser[user.login.toLowerCase()]\n\n    useEffect(() => {\n        if (!events) {\n            dispatch(getEventsStart({ login }))\n        }\n    }, [events, login, dispatch])\n\n    if (loading) {\n        return <Spinner />\n    }\n\n    if (eventsError) {\n        return <ErrorBox message={eventsError} />\n    }\n\n    return (\n        <div data-testid=\"events\">\n            {events && events.length ? (\n                events.map((event) => <EventListItem key={event.id} event={event} user={user} />)\n            ) : (\n                <div>No PR events recently.</div>\n            )}\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { REPOS_PER_PAGE } from 'app/config'\nimport { RootState } from 'app/rootReducer'\nimport { UserDetails } from 'app/types'\nimport { ButtonLink, ErrorBox, Spinner } from 'common/components'\n\nimport styles from './RepoList.module.scss'\nimport { getReposStart } from './userReposSlice'\n\ninterface URLProps {\n    user: UserDetails\n}\n\nexport const RepoList = ({ user }: URLProps) => {\n    const { login, publicRepos: reposCount } = user\n\n    const dispatch = useDispatch()\n\n    const { loading, error: reposError, reposByUser } = useSelector((state: RootState) => state.userRepos)\n\n    const repos = reposByUser[user.login.toLowerCase()]\n\n    useEffect(() => {\n        if (!repos) {\n            dispatch(getReposStart({ login, page: 0 }))\n        }\n    }, [repos, login, dispatch])\n\n    const onLoadMoreHandler = () => {\n        if (repos) {\n            const currentPage = Math.floor(repos.length / REPOS_PER_PAGE)\n            dispatch(getReposStart({ login, page: currentPage + 1 }))\n        }\n    }\n\n    let content\n\n    if (reposError) {\n        content = <ErrorBox message={reposError} />\n    }\n\n    if (repos) {\n        content = repos.length ? (\n            <>\n                <ul>\n                    {repos.map((repo) => (\n                        <li key={repo.id}>{repo.name}</li>\n                    ))}\n                </ul>\n                {reposCount > repos.length && !loading && (\n                    <ButtonLink onClick={onLoadMoreHandler}>Load more</ButtonLink>\n                )}\n            </>\n        ) : (\n            <div>No pubic repos.</div>\n        )\n    }\n\n    return (\n        <div className={styles.repos}>\n            <p>\n                <b>Repositories count: </b> <span data-testid=\"repoCnt\">{reposCount}</span>\n            </p>\n            <p>\n                <b>Repositories list:</b>\n            </p>\n            {content}\n            {loading && <Spinner />}\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { RootState } from 'app/rootReducer'\nimport { Spinner, UserCard } from 'common/components'\nimport useDocumentTitle from 'common/hooks/useDocumentTitle'\nimport ErrorPage from 'features/error/ErrorPage'\nimport { EventList } from 'features/userEvents/EventList'\nimport { RepoList } from 'features/userRepos/RepoList'\n\nimport styles from './UserPage.module.scss'\nimport { getUserDetailsStart } from './userDetailsSlice'\n\nexport const UserPage: React.FC = () => {\n    const { login } = useParams()\n\n    const dispatch = useDispatch()\n\n    const { detailsByUser, error: userError, loading } = useSelector((state: RootState) => state.userDetails)\n    const user = detailsByUser[login.toLowerCase()]\n\n    useDocumentTitle(user && user.login)\n\n    useEffect(() => {\n        if (!user) {\n            dispatch(getUserDetailsStart({ login }))\n        }\n        window.scrollTo({ top: 0 })\n    }, [login, user, dispatch])\n\n    if (userError) {\n        return <ErrorPage />\n    }\n\n    if (loading || !user) {\n        return <Spinner />\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.section}>\n                <div>\n                    <h2>Profile</h2>\n                    <UserCard user={user} lg />\n                    <h2 className={styles.mtop}>Repositories</h2>\n                    <RepoList user={user} />\n                </div>\n            </div>\n\n            <div className={styles.section}>\n                <h2>History of PR</h2>\n                <EventList user={user} />\n            </div>\n        </div>\n    )\n}\n\nexport default UserPage\n"],"sourceRoot":""}